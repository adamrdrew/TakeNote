//
//  MarkdownConfiguration.swift
//  TakeNote
//
//  Created by Adam Drew on 8/8/25.
//

// This code was generated by ChatGPT 5
// It is based on the other language support classes I observed here: https://github.com/mchakravarty/CodeEditorView/blob/main/Sources/LanguageSupport/SwiftConfiguration.swift

import Foundation
import RegexBuilder
import LanguageSupport

extension LanguageConfiguration {

  /// Language configuration for Markdown (CommonMark + GitHub-ish extras)
  ///
  /// Notes:
  /// - We use `stringRegex` to capture **inline code** spans: `code`.
  /// - We leave fenced blocks (``` … ```) to the operator regex (the backticks)
  ///   since `LanguageConfiguration` only gives us a single string regex.
  /// - Headings/emphasis/lists/links are surfaced via `operatorRegex` so they can be colored distinctly.
  /// - Identifiers are “words” so normal text isn’t all operator-colored.
  ///
  public static func markdown(_ languageService: LanguageService? = nil) -> LanguageConfiguration {
    // Numbers inside text (used in lists, tables, etc.)
    // Simple word-boundary number matcher: 123, 123.45
    let numberRegex: Regex<Substring> = /\b\d+(?:\.\d+)?\b/

    // Plain “word” identifiers so the body text isn’t treated as operators.
    // Words can include intra-word dashes/underscores and a leading $.
    let identifierRegex: Regex<Substring> = /[A-Za-z0-9_$][A-Za-z0-9_-]*/

    // Markdown punctuation / “operators”: headings, emphasis, code, lists, links, images, blockquotes, tables, rules, tasks.
    // We keep this broad and fast so the highlighter can color these markers distinctly from text.
    let operatorRegex: Regex<Substring> = {
      // Start-of-line markers: headings, blockquotes, lists, hr, fenced code fences, tables, ordered lists
      let solMarkers: Regex<Substring> = Regex {
        Anchor.startOfLine
        ChoiceOf {
          Repeat(1...6) { "#" }            // headings
          ">"
          "```"                            // fenced code fence marker
          Regex { OneOrMore { .digit }; "." } // ordered list: 1.
          "|"                              // table line start
          Regex { Repeat(3...) { "-" } }   // hr ---
          Regex { Repeat(3...) { "*" } }   // hr ***
          Regex { Repeat(3...) { "_" } }   // hr ___
          "-"                               // unordered list markers
          "+"
          "*"
        }
      }

      // Inline formatting punctuation runs: **, __, *, _, ~~ (strike), ` (inline code), ![image], [], (), | (tables), \\ escapes, :
      let inlinePunct: Regex<Substring> = Regex {
        OneOrMore {
          CharacterClass.anyOf("*_`~[]()!#>|-+\\:|{}")
        }
      }

      return Regex {
        ChoiceOf { solMarkers; inlinePunct }
      }
    }()

    // Inline code span: `...` (single line). We intentionally keep it simple.
    let inlineCodeStringRegex: Regex<Substring> = /`(?:\\`|[^`])*`/

    // For Markdown, there’s no character literal; comments don’t apply either.
    // We keep square/curly so bracket matching works in links `{}` (rare) and code blocks.
    let reservedIdentifiers: [String] = [
      // “Pseudo keywords” surfaced as identifiers if the tokenizer falls back:
      // add common GFM terms so you can color them if you want to via reserved-identifier styling.
      "TODO", "NOTE", "WARNING", "HACK", "FIXME"
    ]

    let reservedOperators: [String] = [
      "#", "##", "###", "####", "#####", "######",
      "*", "**", "_", "__", "~~", "`", "```",
      ">", "-", "+", "1.", "[]", "()", "![", "]", "(", ")", "[", "]",
      "|", ":", "\\"
    ]

    return LanguageConfiguration(
      name: "Markdown",
      supportsSquareBrackets: true,
      supportsCurlyBrackets: true,
      stringRegex: inlineCodeStringRegex,   // highlights `inline code`
      characterRegex: nil,
      numberRegex: numberRegex,
      singleLineComment: nil,
      nestedComment: nil,
      identifierRegex: identifierRegex,
      operatorRegex: operatorRegex,
      reservedIdentifiers: reservedIdentifiers,
      reservedOperators: reservedOperators,
      languageService: languageService
    )
  }
}
